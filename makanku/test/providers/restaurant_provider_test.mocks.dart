// Mocks generated by Mockito 5.4.6 from annotations
// in makanku/test/providers/restaurant_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:makanku/data/api_service.dart' as _i2;
import 'package:makanku/data/models/restaurant.dart' as _i3;
import 'package:makanku/data/restaurant_repository.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiService_0 extends _i1.SmartFake implements _i2.ApiService {
  _FakeApiService_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRestaurant_1 extends _i1.SmartFake implements _i3.Restaurant {
  _FakeRestaurant_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RestaurantRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantRepository extends _i1.Mock
    implements _i4.RestaurantRepository {
  MockRestaurantRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiService get api =>
      (super.noSuchMethod(
            Invocation.getter(#api),
            returnValue: _FakeApiService_0(this, Invocation.getter(#api)),
          )
          as _i2.ApiService);

  @override
  _i5.Future<List<_i3.Restaurant>> getRestaurants() =>
      (super.noSuchMethod(
            Invocation.method(#getRestaurants, []),
            returnValue: _i5.Future<List<_i3.Restaurant>>.value(
              <_i3.Restaurant>[],
            ),
          )
          as _i5.Future<List<_i3.Restaurant>>);

  @override
  _i5.Future<_i3.Restaurant> getDetail(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getDetail, [id]),
            returnValue: _i5.Future<_i3.Restaurant>.value(
              _FakeRestaurant_1(this, Invocation.method(#getDetail, [id])),
            ),
          )
          as _i5.Future<_i3.Restaurant>);

  @override
  _i5.Future<List<_i3.Restaurant>> search(String? q) =>
      (super.noSuchMethod(
            Invocation.method(#search, [q]),
            returnValue: _i5.Future<List<_i3.Restaurant>>.value(
              <_i3.Restaurant>[],
            ),
          )
          as _i5.Future<List<_i3.Restaurant>>);

  @override
  _i5.Future<bool> addReview(String? id, String? name, String? review) =>
      (super.noSuchMethod(
            Invocation.method(#addReview, [id, name, review]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}
